<style>
  .demo-svg {
    width: 100%;
    height: 0;
    padding-bottom: 125%;
    margin: 50px 0 0;
    background: none;
    position: relative;
    z-index: 99;
    transition: all 1s;
  }
  .demo-svg .animate-image {
    position: absolute;
  }
  .demo-svg .animate-rect-1 {
    width: 40%;
    top: 0;
    left: 20%;
  }
  .demo-svg .animate-rect-2 {
    width: 70%;
    top: 10%;
    left: 10%;
  }
  .demo-svg .animate-rect-3 {
    width: 60%;
    top: 30%;
    left: 30%;
  }

  @media (max-width: 700px) {
    .blog-post .column-wrap .main-column {
      width: 100%;
      float: none;
    }
    .blog-post .column-wrap aside {
      width: 100%;
      margin: 0;
    }
  }

  .center-child {
    text-align: center;
  }

  .btn {
    display: inline-block;
    padding: 10px 30px;
    text-transform: uppercase;
    text-decoration: none;
    transition: opacity 0.3s;
    cursor: pointer;
  }
  .btn.btn-primary {
    background-color: #a70000;
    color: #fff;
  }
  .btn:focus,
  .btn:hover {
    opacity: 0.6;
    text-decoration: none;
  }
</style>

<section class="section-svg-animation-demo {% if params.paddingTop %}paddingTop{% endif %} {% if params.paddingBottom %}paddingBottom{% endif %}">
  <div class="demo-svg">
    <svg class="animate-image animate-rect-1" version="1.1" viewBox="0 0 180 400" preserveAspectRatio="xMinYMin meet">
      <g>
        <path d="M180,400H0V0h180V400z" fill="none" stroke="#000000" stroke-miterlimit="10" stroke-width="3"></path>
        <path d="M170.487,389.999h-160v-380h160V389.999z" fill="none" stroke="#000000" stroke-miterlimit="10"></path>
      </g>
    </svg>
    <svg class="animate-image animate-rect-2" version="1.1" viewBox="-1.5 -1.5 313 203" preserveAspectRatio="xMinYMin meet">
      <g>
        <path d="M310,200H0V0h310V200z" fill="none" stroke="#000000" stroke-miterlimit="10" stroke-width="3"></path>
        <path d="M300.365,189.878H10.366v-180h289.999V189.878z" fill="none" stroke="#000000" stroke-miterlimit="10"></path>
      </g>
    </svg>
    <svg class="animate-image animate-rect-3" version="1.1" viewBox="62.146 64.769 233 263" preserveAspectRatio="xMinYMin meet">
      <path d="M293.646,326.27h-230v-260h230V326.27z" fill="none" stroke="#000000" stroke-miterlimit="10" stroke-width="3"></path>
    </svg>
  </div>

  <p class="center-child" >
    <a class="btn btn-primary start-animation">Start Animation</a>
  </p>
</section>

<script src="https://code.jquery.com/jquery-2.2.4.min.js"></script>

<script type="text/javascript">
  $(document).ready(function () {

    'use strict';

    // the animate illustration object to animate lines of a svg drawing
    var animateIllustration = (function () {

      // this hold the event name that we trigger when the animation for this illustration is done
      var end_event_string;

      /**
       * nextStrokeOffset
       * calculate the stroke offset for the next frame
       * @param  {object} thisPath   a jQuery object for a path element
       * @return {function}          a function that calculates the stroke offset
       */
      var nextStrokeOffset = function (thisPath) {
        // get local versions of path frame data
        var maxFrame = thisPath.data('maxFrame');
        var currentFrame = thisPath.data('currentFrame');
        // increase the current frame
        currentFrame++;
        thisPath.data('currentFrame', currentFrame);

        // easeInOutQuad
        // easing function from: https://gist.github.com/gre/1650294
        var easing = function (t) {
          return t < 0.5
            ? 2 * t * t
            : -1 + (4 - 2 * t) * t;
        };

        return Math.min(1, easing(currentFrame / maxFrame));
      };

      /**
       * initPaths
       * prepare all paths the comprise the illustration and store the properties as data on the path
       * @param  {object} paths jQuery collection of all paths
       * @return none
       */
      var initPaths = function (paths) {
        paths.each(function () {
          var path = this;
          var $path = $(this);
          var length = path.getTotalLength();

          $path.data('length', length);
          $path.data('currentFrame', 0);
          $path.data('maxFrame', 150);

          // set initial dash position
          path.style.strokeDasharray = length + ' ' + length;
          path.style.strokeDashoffset = length;
          // make this particular path visible
          $path.show();
        });
      };

      /**
       * drawIllustration
       * draw one frame
       * @param  {object} allPaths a jQuery collection of all paths
       * @return {bool}            false when the animation is done
       */
      var drawIllustration = function (allPaths) {
        var progress;
        // update all paths
        // all paths have the same amount of frames
        allPaths.each(function () {
          var thisPath = $(this);
          progress = nextStrokeOffset(thisPath);
          var length = thisPath.data('length');
          thisPath[0].style.strokeDashoffset = Math.floor(length * (1 - progress));
        });
        if (progress >= 1) {
          return true;
        }
        return false;
      };

      /**
       * dispatch
       * @param  {Function} callback the callback for the specific animation
       * @param  {object}   options  will be past to the callback
       * @return none
       */
      var dispatch = function (callback, options) {
        // "schedule" one callback execution with the next animation frame
        var handle = window.requestAnimationFrame(function () {
          dispatch(callback, options);
        });

        // execute a callback
        // if the callback returns false, cancel the animation frame
        if (callback(options)) {
          window.cancelAnimationFrame(handle);
          // trigger a jQuery custom event so other, sequentials elements
          // can bind to it to start their animations
          if (end_event_string !== 'end') {
            $('body').trigger(end_event_string);
          }
        }
      };

      /**
       * startDrawing
       * Start to draw the illustration
       * @param  {object} paths a jQuery object of the paths that comprise the svg illustration
       * @return none
       */
      var startDrawing = function (paths, end_event) {
        end_event_string = end_event;
        initPaths(paths);
        dispatch(drawIllustration, paths);
      };

      /**
       * Expose the startDrawing as public method
       */
      return {startDrawing: startDrawing};

    }());

    var paths;

    $('.start-animation').on('click', function () {
      // hide all svg line drawings, e.g. all paths
      $('path').hide();

      // start the animation
      paths = $('.animate-rect-1').find('path');
      // pass the illustration paths and the custom event name to be executed when this illustration is done
      animateIllustration.startDrawing(paths, 'next-rect');
    });

    $('body').on('next-rect', function () {
      paths = $('.animate-rect-2').find('path');
      // pass the illustration paths and the custom event name to be executed when this illustration is done
      animateIllustration.startDrawing(paths, 'another-rect');
    });

    $('body').on('another-rect', function () {
      paths = $('.animate-rect-3').find('path');
      // pass the illustration paths and the custom event name to be executed when this illustration is done
      animateIllustration.startDrawing(paths, 'end');
    });
  });
</script>